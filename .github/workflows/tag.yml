name: tests & Tag

on:
  push:
    branches:
      - main  # Run for every push to the main branch
    tags:
      - '*'
    # paths:
    #    - GitAction_workaround/**  # This will run the workflow only when files inside 'your-folder' are changed
  pull_request:
    branches:
      - main
    # paths:
    #    - GitAction_workaround/** # This will run the workflow for pull requests that affect 'your-folder'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]  # Matrix build for different Node.js versions

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Node.js for the matrix build
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Cache node modules to speed up workflow
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Upgrade npm 10.9.0
        run: npm install -g npm@10.9.0
        
      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          npm install
        working-directory: ./GitAction_workaround

      - name: Fix permissions for Eslint & Jest executable
        run: |
          chmod +x ./GitAction_workaround/node_modules/.bin/eslint
          chmod +x ./GitAction_workaround/node_modules/.bin/jest

      # Step 5: Run ESLint
      - name: Run ESLint
        run: |
          npm run lint  # Assumes you have a lint script defined in package.json
        working-directory: ./GitAction_workaround

      # # Step 6: Run Jest tests
      
      # - name: Fix permissions for Jest executable
      #   run: chmod +x ./GitAction_workaround/node_modules/.bin/jest
        
      - name: location
        run: pwd      
        
      - name: Run Jest tests
        run: |
          npm test  # Assumes you have a test script defined in package.json
        working-directory: ./GitAction_workaround

  Create-tag:
    runs-on: ubuntu-latest
    #needs: build-and-test  # Ensure this job runs after the tests pass
    
    steps:
     - name: Checkout repository
       uses: actions/checkout@v2
        
        # Step 1: Create a semantic version tag
     - name: Create semantic version Tag
       id: create_tag
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
          cd GitAction_workaround  # Navigate to the directory containing package.json
  
            # Pull latest changes and tags to ensure synchronization
            git pull origin main --tags
  
            # Increment patch version and create new tag in package.json
            NEW_VERSION=$(npm version patch -m "Release version %s")
            echo "New version created by npm: $NEW_VERSION"
  
            # Ensure the tag was created and show it, otherwise create it manually
            NEW_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ "$NEW_TAG" != "$NEW_VERSION" ]; then
              echo "Tag not found in git; creating manually..."
              git tag "$NEW_VERSION"
            fi
  
            # Verify local tags and new tag creation
            echo "Local tags after npm version increment:"
            git tag
            echo "This is version $NEW_VERSION"
            # Configure git user for actions
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
  
            # Stage and commit the version bump
            git add package.json package-lock.json
            git commit -m "chore: release $NEW_VERSION"
  
            # Push branch changes
            git push origin HEAD
  
            # Push the newly created tag explicitly
            git push origin "$NEW_VERSION"




            
  create-release:
    runs-on: ubuntu-latest
    needs: Create-tag
    #if: startsWith(github.ref, 'refs/tags/')  # Runs only for tag pushes

    steps:

     - name: Checkout repository
       uses: actions/checkout@v2

     - name: Get the latest tag
       id: get-latest-tag
       run: |
        git fetch --tags
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo "Latest tag: $latest_tag"
        echo "tag_name=$latest_tag" >> $GITHUB_ENV
  
     - name: Create GitHub release
       uses: softprops/action-gh-release@v1
       with:
        tag_name:  ${{ env.tag_name }}  # Explicitly pass the tag name to the release action
       env:
          GITHUB_TOKEN: ${{ secrets.HUB_TOKEN }}  # Automatically available in GitHub Actions


