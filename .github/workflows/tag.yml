name: Tests & Tag

on:
  push:
    branches:
      - main  # Run for every push to the main branch
    tags:
      - '*'  # Trigger on all tag pushes
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]  # Test with Node.js version 18.x

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Change to the correct directory
        run: cd GitAction_workaround

      - name: Check contents
        run: ls

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Upgrade npm to 10.9.0
        run: npm install -g npm@10.9.0

      - name: Install dependencies
        run: npm install
        working-directory: ./GitAction_workaround

      - name: Fix permissions for Jest
        run: chmod +x ./GitAction_workaround/node_modules/.bin/jest

      - name: Run Jest tests
        run: npm test
        working-directory: ./GitAction_workaround

  create-tag:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create semantic version Tag
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd GitAction_workaround
          git pull origin main --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEW_VERSION=$(npm version patch -m "Release version %s")
          echo "New version created by npm: $NEW_VERSION"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git add package.json package-lock.json
          git commit -m "chore: release $NEW_VERSION"
          git push origin HEAD
          git push origin "$NEW_VERSION"
          echo "::set-output name=tag::$NEW_VERSION"

  create-release:
    runs-on: ubuntu-latest
    needs: create-tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch tags (ensure)
        run: git fetch --tags

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
