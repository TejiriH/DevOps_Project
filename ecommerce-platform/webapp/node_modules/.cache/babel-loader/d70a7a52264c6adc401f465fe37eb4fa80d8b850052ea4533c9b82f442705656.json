{"ast":null,"code":"// import React from 'react';\n// import ProductList from './components/ProductList';\n// import Login from './components/Login';\n// import OrderPlacement from './components/OrderPlacement';\n// function App() {\n//   return (\n//     <div>\n//       <h1>E-Commerce Platform</h1>\n//       <Login />\n//       <ProductList />\n//       <OrderPlacement />\n//     </div>\n//   );\n// }\n// export default App;\n// src/app.js\nconst express=require('express');const app=express();// Middleware to handle JSON requests\napp.use(express.json());// Route for the root endpoint\napp.get('/',(req,res)=>{res.status(200).send('Welcome');});// Route to get the list of products\napp.get('/api/products',(req,res)=>{try{// Simulated product data (you can replace this with actual DB logic if needed)\nconst products=[{id:1,name:'Product 1'},{id:2,name:'Product 2'}];// Log the products data\nconsole.log('Products:',products);// Respond with a 200 status and the products array\nres.status(200).json(products);}catch(error){// Log the error if one occurs\nconsole.error('Error occurred in /api/products route:',error);// Send a 500 error response\nres.status(500).json({message:\"Internal Server Error\"});}});// Assuming you're exporting the app for use in the test\nmodule.exports=app;// Optionally, if you want to start the server in app.js, use this\n// if (require.main === module) {\n//   app.listen(3000, () => console.log('Server running on port 3000'));\n// }","map":{"version":3,"names":["express","require","app","use","json","get","req","res","status","send","products","id","name","console","log","error","message","module","exports"],"sources":["C:/Users/Henry/Documents/DevOps_journey/github_rep/DevOps_Projects/ecommerce/webapp/src/App.js"],"sourcesContent":["// import React from 'react';\r\n// import ProductList from './components/ProductList';\r\n// import Login from './components/Login';\r\n// import OrderPlacement from './components/OrderPlacement';\r\n\r\n// function App() {\r\n//   return (\r\n//     <div>\r\n//       <h1>E-Commerce Platform</h1>\r\n//       <Login />\r\n//       <ProductList />\r\n//       <OrderPlacement />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n// src/app.js\r\nconst express = require('express');\r\nconst app = express();\r\n\r\n// Middleware to handle JSON requests\r\napp.use(express.json());\r\n\r\n// Route for the root endpoint\r\napp.get('/', (req, res) => {\r\n  res.status(200).send('Welcome');\r\n});\r\n\r\n// Route to get the list of products\r\napp.get('/api/products', (req, res) => {\r\n  try {\r\n    // Simulated product data (you can replace this with actual DB logic if needed)\r\n    const products = [\r\n      { id: 1, name: 'Product 1' },\r\n      { id: 2, name: 'Product 2' },\r\n    ];\r\n    \r\n    // Log the products data\r\n    console.log('Products:', products);\r\n    \r\n    // Respond with a 200 status and the products array\r\n    res.status(200).json(products);\r\n  } catch (error) {\r\n    // Log the error if one occurs\r\n    console.error('Error occurred in /api/products route:', error);\r\n    \r\n    // Send a 500 error response\r\n    res.status(500).json({ message: \"Internal Server Error\" });\r\n  }\r\n});\r\n\r\n// Assuming you're exporting the app for use in the test\r\nmodule.exports = app;\r\n\r\n\r\n// Optionally, if you want to start the server in app.js, use this\r\n// if (require.main === module) {\r\n//   app.listen(3000, () => console.log('Server running on port 3000'));\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,KAAM,CAAAA,OAAO,CAAGC,OAAO,CAAC,SAAS,CAAC,CAClC,KAAM,CAAAC,GAAG,CAAGF,OAAO,CAAC,CAAC,CAErB;AACAE,GAAG,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC,CAEvB;AACAF,GAAG,CAACG,GAAG,CAAC,GAAG,CAAE,CAACC,GAAG,CAAEC,GAAG,GAAK,CACzBA,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC,CACjC,CAAC,CAAC,CAEF;AACAP,GAAG,CAACG,GAAG,CAAC,eAAe,CAAE,CAACC,GAAG,CAAEC,GAAG,GAAK,CACrC,GAAI,CACF;AACA,KAAM,CAAAG,QAAQ,CAAG,CACf,CAAEC,EAAE,CAAE,CAAC,CAAEC,IAAI,CAAE,WAAY,CAAC,CAC5B,CAAED,EAAE,CAAE,CAAC,CAAEC,IAAI,CAAE,WAAY,CAAC,CAC7B,CAED;AACAC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEJ,QAAQ,CAAC,CAElC;AACAH,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACJ,IAAI,CAACM,QAAQ,CAAC,CAChC,CAAE,MAAOK,KAAK,CAAE,CACd;AACAF,OAAO,CAACE,KAAK,CAAC,wCAAwC,CAAEA,KAAK,CAAC,CAE9D;AACAR,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACJ,IAAI,CAAC,CAAEY,OAAO,CAAE,uBAAwB,CAAC,CAAC,CAC5D,CACF,CAAC,CAAC,CAEF;AACAC,MAAM,CAACC,OAAO,CAAGhB,GAAG,CAGpB;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}